<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auth System</title>
    <style>
        /* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background: #f0f2f5;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
        .auth-container {
            background: white;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
            margin: 1rem;
            transition: transform 0.3s ease;
        }

        .auth-container:hover {
            transform: translateY(-5px);
        }

        /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
        .auth-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .auth-header h2 {
            color: #1a1a1a;
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
        }

        .auth-header p {
            color: #666;
            font-size: 0.9rem;
        }

        /* –§–æ—Ä–º–∞ */
        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 1.2rem;
        }

        .input-group {
            position: relative;
        }

        .input-group input {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 2px solid #e0e0e0;
            border-radius: 0.8rem;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .input-group input:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 3px rgba(76,175,80,0.1);
        }

        /* –ö–Ω–æ–ø–∫–∏ */
        .auth-actions {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-top: 1rem;
        }

        .auth-btn {
            padding: 0.8rem;
            border: none;
            border-radius: 0.8rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .auth-btn.primary {
            background: #4CAF50;
            color: white;
        }

        .auth-btn.secondary {
            background: #f0f0f0;
            color: #444;
        }

        .auth-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        /* –°–æ–æ–±—â–µ–Ω–∏—è */
        #message {
            padding: 1rem;
            border-radius: 0.8rem;
            margin-top: 1.5rem;
            display: none;
            text-align: center;
            font-size: 0.9rem;
        }

        #message.success {
            background: #e8f5e9;
            color: #2e7d32;
            border: 1px solid #a5d6a7;
        }

        #message.error {
            background: #ffebee;
            color: #c62828;
            border: 1px solid #ef9a9a;
        }

        /* –ò–∫–æ–Ω–∫–∏ */
        .toggle-auth {
            text-align: center;
            margin-top: 1.5rem;
            color: #666;
        }

        .toggle-auth span {
            color: #4CAF50;
            cursor: pointer;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                padding: 1.5rem;
                border-radius: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="auth-header">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</h2>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>
        </div>

        <form class="auth-form" onsubmit="event.preventDefault()">
            <div class="input-group">
                <input type="text" id="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
            </div>
            
            <div class="input-group">
                <input type="password" id="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            </div>

            <div class="auth-actions">
                <button class="auth-btn primary" onclick="login()">–í–æ–π—Ç–∏</button>
                <button class="auth-btn secondary" onclick="register()">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
            </div>
        </form>

        <div class="toggle-auth">
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <span onclick="toggleAuth()">–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</span>
        </div>

        <div id="message"></div>
    </div>

    <script>
        let isLogin = true;

        function toggleAuth() {
            const header = document.querySelector('.auth-header');
            const loginBtn = document.querySelector('.auth-btn.primary');
            const registerBtn = document.querySelector('.auth-btn.secondary');
            const toggleText = document.querySelector('.toggle-auth span');
            
            isLogin = !isLogin;
            
            if(isLogin) {
                header.querySelector('h2').textContent = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã';
                header.querySelector('p').textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç';
                loginBtn.textContent = '–í–æ–π—Ç–∏';
                registerBtn.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
                toggleText.textContent = '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
            } else {
                header.querySelector('h2').textContent = '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üöÄ';
                header.querySelector('p').textContent = '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –Ω–∞–º–∏';
                loginBtn.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
                registerBtn.textContent = '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
                toggleText.textContent = '–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç';
            }
        }

        function showMessage(text, isSuccess) {
            const message = document.getElementById('message');
            message.textContent = text;
            message.className = isSuccess ? 'success' : 'error';
            message.style.display = 'block';
            setTimeout(() => message.style.display = 'none', 3000);
        }

        function register() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if(!username || !password) {
                showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', false);
                return;
            }

            if(localStorage.getItem('user_' + username)) {
                showMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', false);
                return;
            }

            localStorage.setItem('user_' + username, password);
            showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', true);
            setTimeout(() => window.location.reload(), 1500);
        }

        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const storedPass = localStorage.getItem('user_' + username);

            if(storedPass && storedPass === password) {
                showMessage('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', true);
                setTimeout(() => window.location.href = 'cabinet.html', 1000);
            } else {
                showMessage('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!', false);
            }
        }
    </script>
</body>
</html>